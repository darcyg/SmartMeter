###############################################################################
#
# IAR C/C++ Compiler V6.10.2.50871/W32 for MSP430         28/Oct/2014  22:48:16
# Copyright 1996-2014 IAR Systems AB.
# Evaluation license - IAR Embedded Workbench for Texas Instruments MSP430, Evaluation Version 6.10
#
#    __rt_version  =  3
#    __double_size =  32
#    __reg_r4      =  free
#    __reg_r5      =  free
#    __pic         =  no
#    __core        =  430X
#    __data_model  =  small
#    __code_model  =  large
#    Source file   =  
#        D:\Documents\GitHub\SmartMeter\Source\emeter-ng\emeter-background.c
#    Command line  =  
#        D:\Documents\GitHub\SmartMeter\Source\emeter-ng\emeter-background.c -D
#        "CUSTOM_EMETER_H=\"emeter-1ph-neutral-6733_shunt.h\"" -D X_ZEBU_ -lcN
#        D:\Documents\GitHub\SmartMeter\Source\emeter-ng\Debug\List\ -o
#        D:\Documents\GitHub\SmartMeter\Source\emeter-ng\Debug\Obj\ --debug
#        -D__MSP430F6736__ -e --double=32 --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 7.0\430\lib\dlib\dl430xlsfn.h" -I
#        D:\Documents\GitHub\SmartMeter\Source\emeter-ng/../emeter-toolkit\
#        --core=430X --data_model=small -Ohs --multiplier=32
#        --multiplier_location=4C0 --hw_workaround=CPU40 --hw_workaround=CPU39
#        --code_model=large
#    List file     =  
#        D:\Documents\GitHub\SmartMeter\Source\emeter-ng\Debug\List\emeter-background.lst
#    Object file   =  
#        D:\Documents\GitHub\SmartMeter\Source\emeter-ng\Debug\Obj\emeter-background.r43
#
###############################################################################

D:\Documents\GitHub\SmartMeter\Source\emeter-ng\emeter-background.c
      1          //--------------------------------------------------------------------------
      2          //
      3          //  Software for MSP430 based e-meters.
      4          //
      5          //  THIS PROGRAM IS PROVIDED "AS IS". TI MAKES NO WARRANTIES OR
      6          //  REPRESENTATIONS, EITHER EXPRESS, IMPLIED OR STATUTORY,
      7          //  INCLUDING ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS
      8          //  FOR A PARTICULAR PURPOSE, LACK OF VIRUSES, ACCURACY OR
      9          //  COMPLETENESS OF RESPONSES, RESULTS AND LACK OF NEGLIGENCE.
     10          //  TI DISCLAIMS ANY WARRANTY OF TITLE, QUIET ENJOYMENT, QUIET
     11          //  POSSESSION, AND NON-INFRINGEMENT OF ANY THIRD PARTY
     12          //  INTELLECTUAL PROPERTY RIGHTS WITH REGARD TO THE PROGRAM OR
     13          //  YOUR USE OF THE PROGRAM.
     14          //
     15          //  IN NO EVENT SHALL TI BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
     16          //  CONSEQUENTIAL OR INDIRECT DAMAGES, HOWEVER CAUSED, ON ANY
     17          //  THEORY OF LIABILITY AND WHETHER OR NOT TI HAS BEEN ADVISED
     18          //  OF THE POSSIBILITY OF SUCH DAMAGES, ARISING IN ANY WAY OUT
     19          //  OF THIS AGREEMENT, THE PROGRAM, OR YOUR USE OF THE PROGRAM.
     20          //  EXCLUDED DAMAGES INCLUDE, BUT ARE NOT LIMITED TO, COST OF
     21          //  REMOVAL OR REINSTALLATION, COMPUTER TIME, LABOR COSTS, LOSS
     22          //  OF GOODWILL, LOSS OF PROFITS, LOSS OF SAVINGS, OR LOSS OF
     23          //  USE OR INTERRUPTION OF BUSINESS. IN NO EVENT WILL TI'S
     24          //  AGGREGATE LIABILITY UNDER THIS AGREEMENT OR ARISING OUT OF
     25          //  YOUR USE OF THE PROGRAM EXCEED FIVE HUNDRED DOLLARS
     26          //  (U.S.$500).
     27          //
     28          //  Unless otherwise stated, the Program written and copyrighted
     29          //  by Texas Instruments is distributed as "freeware".  You may,
     30          //  only under TI's copyright in the Program, use and modify the
     31          //  Program without any charge or restriction.  You may
     32          //  distribute to third parties, provided that you transfer a
     33          //  copy of this license to the third party and the third party
     34          //  agrees to these terms by its first use of the Program. You
     35          //  must reproduce the copyright notice and any other legend of
     36          //  ownership on each copy or partial copy, of the Program.
     37          //
     38          //  You acknowledge and agree that the Program contains
     39          //  copyrighted material, trade secrets and other TI proprietary
     40          //  information and is protected by copyright laws,
     41          //  international copyright treaties, and trade secret laws, as
     42          //  well as other intellectual property laws.  To protect TI's
     43          //  rights in the Program, you agree not to decompile, reverse
     44          //  engineer, disassemble or otherwise translate any object code
     45          //  versions of the Program to a human-readable form.  You agree
     46          //  that in no event will you alter, remove or destroy any
     47          //  copyright notice included in the Program.  TI reserves all
     48          //  rights not specifically granted under this license. Except
     49          //  as specifically provided herein, nothing in this agreement
     50          //  shall be construed as conferring by implication, estoppel,
     51          //  or otherwise, upon you, any license or other right under any
     52          //  TI patents, copyrights or trade secrets.
     53          //
     54          //  You may not use the Program in non-TI devices.
     55          //
     56          //  File: emeter-background.c
     57          //
     58          //  Steve Underwood <steve-underwood@ti.com>
     59          //  Texas Instruments Hong Kong Ltd.
     60          //
     61          //  $Id: emeter-background.c,v 1.50 2009/04/23 06:44:30 a0754793 Exp $
     62          //
     63          /*! \file emeter-structs.h */
     64          //
     65          //--------------------------------------------------------------------------
     66          //
     67          //  MSP430 background (interrupt) routines for e-meters
     68          //
     69          //  This software is appropriate for single phase and three phase e-meters
     70          //  using a voltage sensor plus a CT or shunt resistor current sensors, or
     71          //  a combination of a CT plus a shunt.
     72          //
     73          //    The background process deals with the input samples.
     74          //    These are first stored into buffers.
     75          //    The buffered samples are processed as follows:
     76          //    -Voltage and current signals are converted to DC-less AC signals
     77          //    -The current signal is phase compensated
     78          //    -Voltage and current are signed multiplied to give power.
     79          //    -Power samples are accumulated. The accumulated power samples are averaged (in foreground.c)
     80          //     after a number of voltage cycles has been detected.
     81          //
     82          #include <stdint.h>
     83          #include <stdlib.h>
     84          #if !defined(__MSP430__)
     85          #include <stdio.h>
     86          #include <fcntl.h>
     87          #include <unistd.h>
     88          #endif
     89          #if defined(__GNUC__)
     90          #include <signal.h>
     91          #endif
     92          #if defined(__MSP430__)
     93          #include <io.h>
     94          #endif
     95          #include <emeter-toolkit.h>
     96          
     97          #include "emeter-structs.h"
     98          
     99          #if !defined(NULL)
    100          #define NULL    (void *) 0
    101          #endif
    102          
    103          int16_t samples_per_second;
    104          
    105          uint16_t adc_interrupts;
    106          
    107          #if defined(RF_LINK_SUPPORT)
    108          int rf_timeout;
    109          #endif
    110          #if defined(PWM_DITHERING_SUPPORT)
    111          uint8_t pwm_stutter;
    112          #endif
    113          
    114          #if defined(TEMPERATURE_SUPPORT)
    115          int32_t rolling_random;
    116          int32_t rolling_0s = 0;
    117          int32_t rolling_1s = 0;
    118          #endif
    119          
    120          #if defined(MESH_NET_SUPPORT)
    121          int8_t rf_tick_count = 0;
    122          uint8_t rf_service = 0;
    123          #endif
    124          
    125          static int32_t sample_count = 0;
    126          
    127          #if defined(x__MSP430__)
    128              #if defined(BASIC_KEYPAD_SUPPORT)  ||  defined(CUSTOM_KEYPAD_SUPPORT)
    129                  #if defined(sense_key_1_up)
    130          static uint8_t debounce_key_1;
    131          static int16_t key_timer_1;
    132                  #endif
    133                  #if defined(sense_key_2_up)
    134          static uint8_t debounce_key_2;
    135          static int16_t key_timer_2;
    136                  #endif
    137                  #if defined(sense_key_3_up)
    138          static uint8_t debounce_key_3;
    139          static int16_t key_timer_3;
    140                  #endif
    141                  #if defined(sense_key_4_up)
    142          static uint8_t debounce_key_4;
    143          static int16_t key_timer_4;
    144                  #endif
    145          uint8_t key_states;
    146              #endif
    147          #endif
    148          
    149          uint16_t battery_countdown;
    150          
    151          #if defined(POWER_DOWN_SUPPORT)  &&  defined(POWER_UP_BY_SUPPLY_SENSING)
    152          int8_t power_down_debounce;
    153          #endif
    154          #if  defined(POWER_DOWN_SUPPORT)  &&  defined(POWER_UP_BY_VOLTAGE_PULSES)
    155          uint8_t pd_pin_debounce;
    156          #endif
    157          
    158          #if defined(FINE_ENERGY_PULSE_TIMING_SUPPORT)
    159          uint8_t fine_pulse_operation;
    160          #endif
    161          
    162          #if defined(MAGNETIC_INTERFERENCE_SUPPORT)
    163          uint16_t magnetic_sensor_count;
    164          uint16_t magnetic_sensor_count_logged;
    165          #endif
    166          
    167          /* This keypad debounce code provides for 1 to 4 keys, with debounce + long
    168             press detect, of debounce + auto-repeat on long press selectable for each
    169             key. Definitions in emeter.h control this. A long press means >2s.
    170             Auto-repeat means holding the key >1s starts repeats at 3 per second. */
    171          #if defined(x__MSP430__)  &&  (defined(BASIC_KEYPAD_SUPPORT)  ||  defined(CUSTOM_KEYPAD_SUPPORT))
    172          static __inline__ int keypad_debounce(void)
    173          {
    174              int kick_foreground;
    175          
    176              kick_foreground = FALSE;
    177              #if defined(sense_key_1_up)
    178              switch (debounce(&debounce_key_1, sense_key_1_up()))
    179              {
    180              case DEBOUNCE_JUST_RELEASED:
    181                  key_timer_1 = 0;
    182                  break;
    183              case DEBOUNCE_JUST_HIT:
    184                  #if defined(KEY_1_LONG_DOWN)
    185                  /* Start a 2s timer to detect mode change request */
    186                  key_timer_1 = samples_per_second << 1;
    187                  #elif defined(KEY_1_REPEAT_DOWN)
    188                  /* Start an initial 1s timeout for repeats */
    189                  key_timer_1 = samples_per_second;
    190                  #endif
    191                  key_states |= KEY_1_DOWN;
    192                  kick_foreground = TRUE;
    193                  break;
    194              case DEBOUNCE_HIT:
    195                  if (key_timer_1  &&  --key_timer_1 == 0)
    196                  {
    197                  #if defined(KEY_1_LONG_DOWN)
    198                      key_states |= KEY_1_LONG_DOWN;
    199                  #elif defined(KEY_1_REPEAT_DOWN)
    200                      /* Start a 1/3s timeout for repeats */
    201                      #if defined(LIMP_MODE_SUPPORT)
    202                      if (operating_mode == OPERATING_MODE_LIMP)
    203                          key_timer_1 = 273;
    204                      else
    205                      #endif
    206                          key_timer_1 = 1092;
    207                      key_states |= KEY_1_REPEAT_DOWN;
    208                  #endif
    209                      kick_foreground = TRUE;
    210                  }
    211                  break;
    212              }
    213              #endif
    214              #if defined(sense_key_2_up)
    215              switch (debounce(&debounce_key_2, sense_key_2_up()))
    216              {
    217              case DEBOUNCE_JUST_RELEASED:
    218                  key_timer_2 = 0;
    219                  break;
    220              case DEBOUNCE_JUST_HIT:
    221                  #if defined(KEY_2_LONG_DOWN)
    222                  /* Start a 2s timer to detect mode change request */
    223                  key_timer_2 = samples_per_second << 1;
    224                  #elif defined(KEY_2_REPEAT_DOWN)
    225                  /* Start an initial 1s timeout for repeats */
    226                  key_timer_2 = samples_per_second;
    227                  #endif
    228                  key_states |= KEY_2_DOWN;
    229                  kick_foreground = TRUE;
    230                  break;
    231              case DEBOUNCE_HIT:
    232                  if (key_timer_2  &&  --key_timer_2 == 0)
    233                  {
    234                  #if defined(KEY_2_LONG_DOWN)
    235                      key_states |= KEY_2_LONG_DOWN;
    236                  #elif defined(KEY_2_REPEAT_DOWN)
    237                      /* Start a 1/3s timeout for repeats */
    238                      key_timer_2 = 1092;
    239                      key_states |= KEY_2_REPEAT_DOWN;
    240                  #endif
    241                      kick_foreground = TRUE;
    242                  }
    243                  break;
    244              }
    245              #endif
    246              #if defined(sense_key_3_up)
    247              switch (debounce(&debounce_key_3, sense_key_3_up()))
    248              {
    249              case DEBOUNCE_JUST_RELEASED:
    250                  key_timer_3 = 0;
    251                  break;
    252              case DEBOUNCE_JUST_HIT:
    253                  #if defined(KEY_3_LONG_DOWN)
    254                  /* Start a 2s timer to detect mode change request */
    255                  key_timer_3 = samples_per_second << 1;
    256                  #elif defined(KEY_3_REPEAT_DOWN)
    257                  /* Start an initial 1s timeout for repeats */
    258                  key_timer_3 = samples_per_second;
    259                  #endif
    260                  key_states |= KEY_3_DOWN;
    261                  kick_foreground = TRUE;
    262                  break;
    263              case DEBOUNCE_HIT:
    264                  if (key_timer_3  &&  --key_timer_3 == 0)
    265                  {
    266                  #if defined(KEY_3_LONG_DOWN)
    267                      key_states |= KEY_3_LONG_DOWN;
    268                  #elif defined(KEY_3_REPEAT_DOWN)
    269                      /* Start a 1/3s timeout for repeats */
    270                      key_timer_3 = 1092;
    271                      key_states |= KEY_3_REPEAT_DOWN;
    272                  #endif
    273                      kick_foreground = TRUE;
    274                  }
    275                  break;
    276              }
    277              #endif
    278              #if defined(sense_key_4_up)
    279              switch (debounce(&debounce_key_4, sense_key_4_up()))
    280              {
    281              case DEBOUNCE_JUST_RELEASED:
    282                  key_timer_4 = 0;
    283                  break;
    284              case DEBOUNCE_JUST_HIT:
    285                  #if defined(KEY_4_LONG_DOWN)
    286                  /* Start a 2s timer to detect mode change request */
    287                  key_timer_4 = samples_per_second << 1;
    288                  #elif defined(KEY_4_REPEAT_DOWN)
    289                  /* Start an initial 1s timeout for repeats */
    290                  key_timer_4 = samples_per_second;
    291                  #endif
    292                  key_states |= KEY_4_DOWN;
    293                  kick_foreground = TRUE;
    294                  break;
    295              case DEBOUNCE_HIT:
    296                  if (key_timer_4  &&  --key_timer_4 == 0)
    297                  {
    298                  #if defined(KEY_4_LONG_DOWN)
    299                      key_states |= KEY_3_LONG_DOWN;
    300                  #elif defined(KEY_4_REPEAT_DOWN)
    301                      /* Start a 1/3s timeout for repeats */
    302                      key_timer_4 = 1092;
    303                      key_states |= KEY_4_REPEAT_DOWN;
    304                  #endif
    305                      kick_foreground = TRUE;
    306                  }
    307                  break;
    308              }
    309              #endif
    310              return  kick_foreground;
    311          }
    312          #endif
    313          
    314          #if defined(SINGLE_PHASE)
    315          static void __inline__ log_parameters(void)
    316          #else
    317          static void __inline__ log_parameters(struct phase_parms_s *phase)
    318          #endif
    319          {
    320          #if GAIN_STAGES > 1
    321              int i;
    322          #else
    323          #define i 0
    324          #endif
    325          
    326              /* Take a snapshot of various values for logging purposes; tell the
    327                 foreground to deal with them; and clear the working values ready
    328                 for the next analysis period. */
    329              if (phase->metrology.V_endstops <= 0)
    330                  phase->status |= V_OVERRANGE;
    331              else
    332                  phase->status &= ~V_OVERRANGE;
    333              phase->metrology.V_endstops = ENDSTOP_HITS_FOR_OVERLOAD;
    334          #if defined(VRMS_SUPPORT)
    335              transfer48(phase->metrology.dot_prod_logged.V_sq, phase->metrology.dot_prod.V_sq);
    336          #endif
    337          
    338              if (phase->metrology.current.I_endstops <= 0)
    339                  phase->status |= I_OVERRANGE;
    340              else
    341                  phase->status &= ~I_OVERRANGE;
    342              phase->metrology.current.I_endstops = ENDSTOP_HITS_FOR_OVERLOAD;
    343          #if defined(SINGLE_PHASE)  &&  defined(NEUTRAL_MONITOR_SUPPORT)
    344              if (phase->metrology.neutral.I_endstops <= 0)
    345                  phase->status |= I_NEUTRAL_OVERRANGE;
    346              else
    347                  phase->status &= ~I_NEUTRAL_OVERRANGE;
    348              phase->metrology.neutral.I_endstops = ENDSTOP_HITS_FOR_OVERLOAD;
    349          #endif
    350          
    351              phase->metrology.current.dot_prod_logged.sample_count = phase->metrology.current.dot_prod.sample_count;
    352              phase->metrology.current.dot_prod.sample_count = 0;
    353          #if defined(SINGLE_PHASE)  &&  defined(NEUTRAL_MONITOR_SUPPORT)
    354              phase->metrology.neutral.dot_prod_logged.sample_count = phase->metrology.neutral.dot_prod.sample_count;
    355              phase->metrology.neutral.dot_prod.sample_count = 0;
    356          #endif
    357          #if GAIN_STAGES > 1
    358              for (i = 0;  i < GAIN_STAGES;  i++)
    359          #endif
    360              {
    361          #if defined(IRMS_SUPPORT)
    362                //MM24  
    363                transfer_ac_current(phase->metrology.current.dot_prod_logged.I_sq, phase->metrology.current.dot_prod.I_sq);
    364          #endif
    365                  //MM24
    366                  //transfer48(phase->metrology.current.dot_prod_logged.P_active[i], phase->metrology.current.dot_prod.P_active[i]);
    367                  transfer_ac_power(phase->metrology.current.dot_prod_logged.P_active, phase->metrology.current.dot_prod.P_active);
    368          #if defined(REACTIVE_POWER_BY_QUADRATURE_SUPPORT)
    369                  //MM24
    370                  //transfer48(phase->metrology.current.dot_prod_logged.P_reactive[i], phase->metrology.current.dot_prod.P_reactive[i]);
    371                  transfer_ac_power(phase->metrology.current.dot_prod_logged.P_reactive, phase->metrology.current.dot_prod.P_reactive);
    372             
    373          #endif
    374          
    375          #if defined(SINGLE_PHASE)  &&  defined(NEUTRAL_MONITOR_SUPPORT)
    376              #if defined(IRMS_SUPPORT)
    377                  transfer48(phase->metrology.neutral.dot_prod_logged.I_sq[i], phase->metrology.neutral.dot_prod.I_sq[i]);
    378              #endif
    379                  transfer48(phase->metrology.neutral.dot_prod_logged.P_active[i], phase->metrology.neutral.dot_prod.P_active[i]);
    380              #if defined(REACTIVE_POWER_BY_QUADRATURE_SUPPORT)
    381                  transfer48(phase->metrology.neutral.dot_prod_logged.P_reactive[i], phase->metrology.neutral.dot_prod.P_reactive[i]);
    382              #endif
    383          #endif
    384              }
    385              phase->metrology.dot_prod_logged.sample_count = phase->metrology.dot_prod.sample_count;
    386              phase->metrology.dot_prod.sample_count = 0;
    387          #if defined(MAGNETIC_INTERFERENCE_SUPPORT)
    388              magnetic_sensor_count_logged = magnetic_sensor_count;
    389              /* Don't reset to zero, to prevent divide by zero */
    390              magnetic_sensor_count = 1;
    391          #endif
    392          
    393              /* Tell the foreground there are things to process. */
    394              phase->status |= NEW_LOG;
    395          #if GAIN_STAGES <= 1
    396          #undef i
    397          #endif
    398          }
    399          
    400          #if !defined(SINGLE_PHASE)  &&  defined(NEUTRAL_MONITOR_SUPPORT)  &&  defined(IRMS_SUPPORT)
    401          /* This routine logs neutral lead information for poly-phase meters. It is
    402             not used for single phase meters with neutral monitoring. */
    403          static void __inline__ log_neutral_parameters(void)
    404          {
    405          #if GAIN_STAGES > 1
    406              int i;
    407          #else
    408          #define i 0
    409          #endif
    410          
    411              if (neutral.metrology.I_endstops <= 0)
    412                  neutral.status |= I_OVERRANGE;
    413              else
    414                  neutral.status &= ~I_OVERRANGE;
    415              neutral.metrology.I_endstops = ENDSTOP_HITS_FOR_OVERLOAD;
    416              neutral.metrology.sample_count_logged = neutral.metrology.sample_count;
    417          #if GAIN_STAGES > 1
    418              for (i = 0;  i < GAIN_STAGES;  i++)
    419          #endif
    420              {
    421              #if defined(IRMS_SUPPORT)  ||  defined(POWER_FACTOR_SUPPORT)
    422                  transfer48(neutral.metrology.I_sq_accum_logged[i], neutral.metrology.I_sq_accum[i]);
    423              #endif
    424              }
    425              neutral.metrology.sample_count = 0;
    426          
    427              /* Tell the foreground there are things to process. */
    428              neutral.status |= NEW_LOG;
    429          
    430          #if GAIN_STAGES <= 1
    431          #undef i
    432          #endif
    433          }
    434          #endif
    435          
    436          #if defined(HARMONICS_SUPPORT)
    437          const int16_t harm_factors[][4] =
    438          {
    439              {   138,   2040,   1972,   1839},
    440              {   138,   2039,   1972,   1838},
    441              {   137,   2039,   1971,   1838},
    442              {   137,   2039,   1971,   1837},
    443              {   137,   2039,   1971,   1836},
    444              {   137,   2039,   1970,   1835},
    445              {   136,   2039,   1970,   1834},
    446              {   136,   2039,   1970,   1833},
    447              {   136,   2039,   1969,   1832},
    448              {   135,   2039,   1969,   1831},
    449              {   135,   2039,   1969,   1831},
    450              {   135,   2039,   1968,   1830},
    451              {   135,   2039,   1968,   1829},
    452              {   134,   2039,   1968,   1828},
    453              {   134,   2039,   1968,   1827},
    454              {   134,   2039,   1967,   1826},
    455              {   133,   2039,   1967,   1825},
    456              {   133,   2039,   1967,   1824},
    457              {   133,   2039,   1966,   1823},
    458              {   133,   2039,   1966,   1823},
    459              {   132,   2039,   1966,   1822},
    460              {   132,   2039,   1965,   1821},
    461              {   132,   2039,   1965,   1820},
    462              {   132,   2039,   1965,   1819},
    463              {   131,   2039,   1964,   1818},
    464              {   131,   2039,   1964,   1817},
    465              {   131,   2039,   1964,   1816},
    466              {   131,   2039,   1963,   1815},
    467              {   130,   2038,   1963,   1814},
    468              {   130,   2038,   1963,   1814},
    469              {   130,   2038,   1962,   1813},
    470              {   130,   2038,   1962,   1812},
    471              {   129,   2038,   1962,   1811},
    472              {   129,   2038,   1961,   1810},
    473              {   129,   2038,   1961,   1809},
    474              {   129,   2038,   1960,   1808},
    475              {   128,   2038,   1960,   1807},
    476              {   128,   2038,   1960,   1806},
    477              {   128,   2038,   1959,   1805},
    478              {   128,   2038,   1959,   1804},
    479              {   127,   2038,   1959,   1803},
    480              {   127,   2038,   1958,   1802},
    481              {   127,   2038,   1958,   1802},
    482              {   127,   2038,   1958,   1801},
    483              {   126,   2038,   1957,   1800},
    484              {   126,   2038,   1957,   1799},
    485              {   126,   2038,   1957,   1798},
    486              {   126,   2038,   1956,   1797},
    487              {   125,   2038,   1956,   1796},
    488              {   125,   2038,   1956,   1795},
    489              {   125,   2038,   1955,   1794},
    490          };
    491          
    492          void goertzel_init(goertzel_state_t *s)
    493          {
    494              s->v2 =
    495              s->v3 = 0;
    496          }
    497          
    498          void goertzel_update(goertzel_state_t *s, int16_t x, int16_t fac)
    499          {
    500              int32_t v1;
    501          
    502              v1 = s->v2;
    503              s->v2 = s->v3;
    504              s->v3 = ((fac*s->v2) >> 10) - v1 + x;
    505          }
    506          
    507          int32_t goertzel_result(goertzel_state_t *s, int16_t fac)
    508          {
    509              int32_t v1;
    510              int32_t v2;
    511              int32_t v3;
    512          
    513              /* Push a zero through the process to finish things off. */
    514              v1 = s->v2;
    515              s->v2 = s->v3;
    516              s->v3 = ((fac*s->v2) >> 10) - v1;
    517          
    518              /* Now calculate the non-recursive side of the filter. */
    519              /* The result here is not scaled down to allow for the magnification
    520                 effect of the filter (the usual DFT magnification effect). */
    521              v2 = s->v2 >> 5;
    522              v3 = s->v3 >> 5;
    523              return v3*v3 + v2*v2 - ((v2*v3) >> 10)*fac;
    524          }
    525          
    526              #if defined(SINGLE_PHASE)
    527          static __inline__ void init_harmonics()
    528              #else
    529          static __inline__ void init_harmonics(struct phase_parms_s *phase)
    530              #endif
    531          {
    532                  goertzel_init(&(phase->metrology.current.harm_1));
    533                  goertzel_init(&(phase->metrology.current.harm_3));
    534                  goertzel_init(&(phase->metrology.current.harm_5));
    535                  phase->metrology.current.harmonic_step = phase->frequency/10 - 475;
    536                  phase->metrology.current.harmonic_samples = harm_factors[phase->metrology.current.harmonic_step][0];
    537          }
    538          
    539              #if defined(SINGLE_PHASE)
    540          static __inline__ void harmonics(int16_t iamp)
    541              #else
    542          static __inline__ void harmonics(struct phase_parms_s *phase, int16_t iamp)
    543              #endif
    544          {
    545              int step;
    546          
    547              step = phase->metrology.current.harmonic_step;
    548          
    549              goertzel_update(&(phase->metrology.current.harm_1), iamp, harm_factors[step][1]);
    550              goertzel_update(&(phase->metrology.current.harm_3), iamp, harm_factors[step][2]);
    551              goertzel_update(&(phase->metrology.current.harm_5), iamp, harm_factors[step][3]);
    552              if (--phase->metrology.current.harmonic_samples <= 0)
    553              {
    554                  phase->metrology.current.pow_1 = goertzel_result(&(phase->metrology.current.harm_1), harm_factors[step][1]);
    555                  phase->metrology.current.pow_3 = goertzel_result(&(phase->metrology.current.harm_3), harm_factors[step][2]);
    556                  phase->metrology.current.pow_5 = goertzel_result(&(phase->metrology.current.harm_5), harm_factors[step][3]);
    557              #if defined(SINGLE_PHASE)
    558                  init_harmonics();
    559              #else
    560                  init_harmonics(phase);
    561              #endif
    562              }
    563          }
    564          #endif
    565          
    566          #if defined(DAC12_DITHERING_SUPPORT)
    567          int16_t dac12_dith;
    568          int16_t dac12_dith2;
    569          #endif
    570          
    571          #if defined(with_DMA)
    572          int16_t dma_adc_buffer[6];
    573          #endif
    574          
    575          /*---------------------------------------------------------------------------
    576            This is the main interrupt routine where the main signal processing is done
    577            ---------------------------------------------------------------------------*/
    578          #if defined(__MSP430__)
    579              #if defined(__MSP430_HAS_SD16_2__)  ||  defined(__MSP430_HAS_SD16_3__)
    580          ISR(SD16, adc_interrupt)
    581              #endif
    582              #if defined(__MSP430_HAS_SD16_A3__)  ||  defined(__MSP430_HAS_SD16_A4__)  ||  defined(__MSP430_HAS_SD16_A6__)  ||  defined(__MSP430_HAS_SD16_A7__)
    583          ISR(SD16A, adc_interrupt)
    584              #endif
    585              #if defined(__MSP430_HAS_SD24_A2__)
    586          ISR(SD24, adc_interrupt)
    587              #endif
    588              #if defined (__MSP430_HAS_SD24_B__)
    589                #ifdef with_DMA
    590          ISR(DMA, adc_interrupt)
    591                #else
    592          ISR(SD24B, adc_interrupt)
    593                #endif
    594              #endif
    595              #if defined(__MSP430_HAS_ADC12__)
    596          ISR(TIMERA0, adc_interrupt)
    597              #endif
    598          #else
    599          void adc_interrupt(void)
    600          #endif
    601          {
    602          #if defined(PWM_DITHERING_SUPPORT)
    603              extern uint16_t rndnum;
    604          #endif
    605              int16_t V_sample;
    606              int16_t V_corrected;
    607              int16_t V_quad_corrected;
    608              current_sample_t corrected;
    609              current_sample_t I_live_sample;
    610          
    611          #if defined(SINGLE_PHASE)  &&  defined(NEUTRAL_MONITOR_SUPPORT)
    612              current_sample_t I_neutral_sample;
    613          #endif
    614          #if GAIN_STAGES > 1
    615              int16_t use_stage;
    616          #else
    617          #define i 0
    618          #define use_stage 0
    619          #endif
    620          #if !defined(SINGLE_PHASE)
    621              struct phase_parms_s *phase;
    622              int j;
    623          #endif
    624          #if defined(__MSP430_HAS_ADC12__)
    625              #if !defined(SINGLE_PHASE)
    626              int16_t adc_buffer[10];
    627              #else
    628              int16_t adc_buffer[5];
    629              #endif
    630              int adc_ptr;
    631          #endif
    632          #if defined(__HAS_SD_ADC__)
    633              #if defined(SINGLE_PHASE)
    634              //static int16_t adc_buffer[3];
    635               static int16_t adc_v_buffer[1];
    636              static current_sample_t adc_i_buffer[2]; 
    637              int adc_ptr;
    638              #else
    639              static int16_t adc_buffer[7];
    640              int adc_ptr;
    641              #endif
    642          #endif
    643          #if !defined(__MSP430__)
    644              int16_t adc_buffer[15];
    645              int adc_ptr;
    646          #endif
    647          #if defined(FINE_ENERGY_PULSE_TIMING_SUPPORT)
    648              int32_t xxx;
    649          #endif
    650              int k;
    651          #if defined(MAINS_FREQUENCY_SUPPORT)
    652              int x;
    653              int y;
    654              int z;
    655          #endif
    656          
    657              sample_count++;
    658          #if defined(__HAS_SD_ADC__)
    659              #if defined(SINGLE_PHASE)
    660          
    661              #if defined(with_DMA)
    662              #else
    663              if (!(TST_SD16IFG_VOLTAGE))
    664              {
    665                  /* We do not have a complete set of samples yet, but we may need to pick
    666                     up some current values at this time */
    667              #if defined(SINGLE_PHASE)  &&  defined(NEUTRAL_MONITOR_SUPPORT)
    668                  if ((TST_SD16IFG_NEUTRAL))
    669                  {
    670                      adc_i_buffer[1] = SD16MEM_NEUTRAL;
    671                      CLR_SD16IFG_NEUTRAL;
    672                  }
    673              #endif
    674                  if ((TST_SD16IFG_LIVE))
    675                  {
    676                      adc_i_buffer[0] = SD16MEM_LIVE;
    677                      CLR_SD16IFG_LIVE;
    678                  }
    679                  return;
    680              }
    681              #endif
    682              #else
    683              if (!(TST_SD16IFG_VOLTAGE_1))
    684              {
    685                  /* We do not have a complete set of samples yet, but we may need to pick
    686                     up some current values at this time */
    687                  if ((TST_SD16IFG_CURRENT_1))
    688                  {
    689                      adc_buffer[1] = SD16MEM_CURRENT_1;
    690                      CLR_SD16IFG_CURRENT_1;
    691                  }
    692                  if ((TST_SD16IFG_CURRENT_2))
    693                  {
    694                      adc_buffer[3] = SD16MEM_CURRENT_2;
    695                      CLR_SD16IFG_CURRENT_2;
    696                  }
    697                  if ((TST_SD16IFG_CURRENT_3))
    698                  {
    699                      adc_buffer[5] = SD16MEM_CURRENT_3;
    700                      CLR_SD16IFG_CURRENT_3;
    701                  }
    702          #if defined(__MSP430_HAS_SD16_A7__)
    703                  if ((TST_SD16IFG_NEUTRAL))
    704                  {
    705                      adc_buffer[6] = SD16MEM_NEUTRAL;
    706                      CLR_SD16IFG_NEUTRAL;
    707                  }
    708          #endif
    709                  return;
    710              }
    711              #endif
    712          #endif
    713          
    714          #if defined(FINE_ENERGY_PULSE_TIMING_SUPPORT)
    715              /* Trigger the energy pulse, timed by timer A */
    716              /* This needs to be at the start of the interrupt service routine so its timing is well defined in
    717                 relation to the counting of timer A */
    718              if (fine_pulse_operation)
    719              {
    720                  /* This early in the interrupt routine timer A's counter should still be at zero. If we request
    721                     a target compare match count of zero while the count is already zero, the output will change
    722                     immediately. Counts of 0 to 9 should, therefore, hit somewhere through the current ADC interrupt
    723                     period. A match of zero will not be as well timed as the others, as we will have missed the exact
    724                     moment when it should begin, but it is good enough. */
    725                  TACCTL2 = fine_pulse_operation;
    726                  fine_pulse_operation = 0;
    727              }
    728          #endif
    729              /* Filter away the DC bias.
    730          
    731                 Do the phase lag compensation. Use a simple FIR approach,
    732                 and absorb the non-unity gain of the filter in the overall
    733                 current/power scaling later on. This is OK for the small
    734                 phase shifts we expect to get. It would cause dynamic
    735                 range problems for larger shifts. Note the some of this
    736                 phase shift is due to the operation of the ADC itself. It
    737                 performs sequential conversions of its 8 inputs, so there is
    738                 some time delay between sampling of the various sensors.
    739          
    740                 Accumulate power for each of the channels. These will
    741                 be divided by the number of samples at the end of the
    742                 measurement cycles, resulting in an average power
    743                 value for each source.
    744          
    745                 If RMS voltage and/or current readings are required, calculate the
    746                 dot products needed to evaluate these. */
    747          
    748          #if defined(__MSP430_HAS_ADC12__)
    749              //P2SEL &= ~BIT4;
    750              //P2OUT |= BIT4;
    751              ADC12CTL0 &= ~ENC;
    752              if (operating_mode == OPERATING_MODE_NORMAL)
    753              {
    754                  /* Start a new ADC scan sequence when Timer_B0 next triggers. */
    755                  ADC12CTL0 |= ENC;
    756              }
    757              else
    758              {
    759                  ADC12CTL0 &= ~ADC12ON;
    760              }
    761              #if !defined(SINGLE_PHASE)
    762              /* Grab the data quickly, in case it gets overwritten later in
    763                 this long interrupt routine. */
    764              adc_buffer[0] = ADC12MEM[2];    //V1
    765              adc_buffer[1] = ADC12MEM[0];    //L1
    766              adc_buffer[2] = ADC12MEM[1];    //H1
    767              adc_buffer[3] = ADC12MEM[5];    //V2
    768              adc_buffer[4] = ADC12MEM[3];    //L2
    769              adc_buffer[5] = ADC12MEM[4];    //H2
    770              adc_buffer[6] = ADC12MEM[8];    //V3
    771              adc_buffer[7] = ADC12MEM[6];    //L3
    772              adc_buffer[8] = ADC12MEM[7];    //H3
    773                  #if defined(NEUTRAL_CURRENT_INPUT)
    774              adc_buffer[9] = ADC12MEM[NEUTRAL_SEQUENCE_POSITION];
    775                  #endif
    776                  #if defined(TEMPERATURE_SUPPORT)
    777              if (operating_mode == OPERATING_MODE_NORMAL)
    778              {
    779                  corrected = ADC12MEM[TEMPURATURE_SEQUENCE_POSITION];
    780                  /* The temperature diode is also something of a noise diode. Its LSB should be
    781                     reasonably random. Therefore, successive LSBs form a workable chain of random
    782                     bits. */
    783                  rolling_random <<= 1;
    784                  rolling_random |= (corrected & 1);
    785                  if (corrected & 1)
    786                      rolling_1s++;
    787                  else
    788                      rolling_0s++;
    789                  temperature = temperature - (temperature >> 3) + corrected;
    790              }
    791                  #endif
    792          
    793                  #if 0
    794              instant_Vcc = ADC12MEM[11];
    795              instant_VeREF_plus = ADC12MEM[12];
    796              instant_VeREF_minus = ADC12MEM[13];
    797                  #endif
    798              #else
    799              /* Grab the data quickly, in case it gets overwritten later in
    800                 this long interrupt routine. */
    801              adc_buffer[0] = ADC12MEM[5];    //V
    802              adc_buffer[1] = ADC12MEM[3];    //L
    803              adc_buffer[2] = ADC12MEM[2];    //A(L)
    804              adc_buffer[3] = ADC12MEM[1];    //N
    805              adc_buffer[4] = ADC12MEM[0];    //A(N)
    806                  #if defined(BATTERY_MONITOR_SUPPORT)
    807              if (battery_countdown)
    808              {
    809                  if (--battery_countdown == 0)
    810                  {
    811                      if (ADC12MEM[6] > 0x800)
    812                          meter_status |= STATUS_BATTERY_OK;
    813                      else
    814                          meter_status &= ~(STATUS_BATTERY_OK);
    815                      /* Battery sensing control pin */
    816                      P3DIR &= ~(BIT1);
    817                      P3OUT |= (BIT1);
    818                  }
    819              }
    820                  #endif
    821                  #if defined(TEMPERATURE_SUPPORT)
    822              if (operating_mode == OPERATING_MODE_NORMAL)
    823              {
    824                  corrected = ADC12MEM[TEMPURATURE_SEQUENCE_POSITION];
    825                  rolling_random <<= 1;
    826                  rolling_random |= (corrected & 1);
    827                  temperature = temperature - (temperature >> 3) + corrected;
    828              }
    829                  #endif
    830              #endif
    831              adc_ptr = -1;
    832          #endif
    833          
    834          #if defined(__HAS_SD_ADC__)
    835              #if defined(SINGLE_PHASE)
    836              /* Voltage is available */
    837              #if defined(with_DMA)
    838              adc_v_buffer[0] = dma_adc_buffer[5]; //SD16MEM_VOLTAGE;
    839              adc_i_buffer[1] = dma_adc_buffer[3]; //SD16MEM_NEUTRAL;
    840              adc_i_buffer[0] = dma_adc_buffer[1]; //SD16MEM_LIVE;
    841              DMA0CTL &= ~DMAIFG;
    842              #else
    843              adc_v_buffer[0] = SD16MEM_VOLTAGE;
    844              CLR_SD16IFG_VOLTAGE;
    845              #endif
    846              /* Pick up any current samples which may have occurred a little before the
    847                 voltage sample, but not those which may have occurred just after the
    848                 voltage sample. */
    849                  #if defined(NEUTRAL_MONITOR_SUPPORT)
    850              if (phase->metrology.neutral.in_phase_correction[0].sd16_preloaded_offset < 128  &&  (TST_SD16IFG_NEUTRAL))
    851              {
    852                  adc_i_buffer[1] = SD16MEM_NEUTRAL;
    853                  CLR_SD16IFG_NEUTRAL;
    854              }
    855                  #endif
    856              if (phase->metrology.current.in_phase_correction[0].sd16_preloaded_offset < 128  &&  (TST_SD16IFG_LIVE))
    857              {
    858                  adc_i_buffer[0] = SD16MEM_LIVE;
    859                  CLR_SD16IFG_LIVE;
    860              }
    861              /* We have a complete set of samples. Process them. */
    862              adc_ptr = -1;
    863              #else
    864              /* Voltage is available */
    865              adc_buffer[0] = SD16MEM_VOLTAGE_1;
    866              SD16CCTL_VOLTAGE_1 &= ~SD16IFG;
    867              adc_buffer[2] = SD16MEM_VOLTAGE_2;
    868              SD16CCTL_VOLTAGE_2 &= ~SD16IFG;
    869              adc_buffer[4] = SD16MEM_VOLTAGE_3;
    870              SD16CCTL_VOLTAGE_3 &= ~SD16IFG;
    871              /* Pick up any current samples which may have occurred a little before the
    872                 voltage sample, but not those which may have occurred just after the
    873                 voltage sample. */
    874              if (chan[0].metrology.current.in_phase_correction[0].sd16_preloaded_offset < 128  &&  (SD16CCTL_CURRENT_1 & SD16IFG))
    875              {
    876                  adc_buffer[1] = SD16MEM_CURRENT_1;
    877                  SD16CCTL_CURRENT_1 &= ~SD16IFG;
    878              }
    879              if (chan[1].metrology.current.in_phase_correction[0].sd16_preloaded_offset < 128  &&  (SD16CCTL_CURRENT_2 & SD16IFG))
    880              {
    881                  adc_buffer[3] = SD16MEM_CURRENT_2;
    882                  SD16CCTL_CURRENT_2 &= ~SD16IFG;
    883              }
    884              if (chan[2].metrology.current.in_phase_correction[0].sd16_preloaded_offset < 128  &&  (SD16CCTL_CURRENT_3 & SD16IFG))
    885              {
    886                  adc_buffer[5] = SD16MEM_CURRENT_3;
    887                  SD16CCTL_CURRENT_3 &= ~SD16IFG;
    888              }
    889                  #if defined(__MSP430_HAS_SD16_A7__)
    890              //if (neutral.metrology.in_phase_correction[0].sd16_preloaded_offset < 128  &&  (SD16CCTL_NEUTRAL & SD16IFG))
    891              if (SD16CCTL_NEUTRAL & SD16IFG)
    892              {
    893                  adc_buffer[6] = SD16MEM_NEUTRAL;
    894                  SD16CCTL_NEUTRAL &= ~SD16IFG;
    895              }
    896                  #endif
    897              /* We have a complete set of samples. Process them. */
    898              adc_ptr = -1;
    899              #endif
    900          #endif
    901          
    902          #if !defined(__MSP430__)
    903              get_sample(adc_buffer);
    904              adc_ptr = -1;
    905          #endif
    906          
    907              kick_watchdog();
    908          
    909          #if defined(__MSP430_HAS_ADC12__)
    910              tpd_gen();
    911          #endif
    912          #if !defined(SINGLE_PHASE)
    913              phase = chan;
    914              for (j = 0;  j < NUM_PHASES;  j++)
    915              {
    916          #endif
    917                adc_ptr++; 
    918                V_sample = adc_v_buffer[0];
    919                  if ((V_sample >= V_ADC_MAX  ||  V_sample <= V_ADC_MIN)  &&  phase->metrology.V_endstops)
    920                      phase->metrology.V_endstops--;
    921          #if defined(LIMP_MODE_SUPPORT)
    922                  //MM24
    923                  //V_sample = dc_filter(&phase->metrology.V_dc_estimate[(operating_mode == OPERATING_MODE_NORMAL)  ?  0  :  1], V_sample);
    924                  V_sample = dc_filter_voltage(phase->metrology.V_dc_estimate[(operating_mode == OPERATING_MODE_NORMAL)  ?  0  :  1], V_sample);
    925          #else
    926                  //MM24
    927                  //V_sample = dc_filter(&phase->metrology.V_dc_estimate, V_sample);
    928                  V_sample = dc_filter_voltage(phase->metrology.V_dc_estimate, V_sample);
    929          #endif
    930          #if defined(VRMS_SUPPORT)  ||  defined(POWER_FACTOR_SUPPORT)
    931                  //accum48(phase->metrology.dot_prod.V_sq, imul16(V_sample, V_sample));
    932                  {
    933                   //MM24 
    934          //            int32_t qq;
    935          //
    936          //            qq = imul16(V_sample, V_sample);
    937          //            accum48(phase->metrology.dot_prod.V_sq, qq);
    938                      sqac_voltage(phase->metrology.dot_prod.V_sq, V_sample);
    939                  }
    940          #endif
    941          #if defined(REACTIVE_POWER_BY_QUADRATURE_SUPPORT)  ||  defined(PHASE_CORRECTION_SUPPORT)
    942                  /* We need to save the history of the voltage signal if we are performing phase correction, and/or
    943                     measuring the quadrature shifted power (to obtain an accurate measure of one form of the reactive power). */
    944                  phase->metrology.V_history[(int) phase->metrology.V_history_index] = V_sample;
    945          #endif
    946          /// !!!Why neg.?        I_live_sample = -dc_filter(&phase->metrology.current.I_dc_estimate[0], phase->metrology.current.I_history[0][0]);
    947                 //MM24
    948          //        I_live_sample = dc_filter(&phase->metrology.current.I_dc_estimate[0], phase->metrology.current.I_history[0][0]);
    949          //        corrected = adc_buffer[++adc_ptr];
    950                  
    951                   I_live_sample = dc_filter_current(phase->metrology.current.I_dc_estimate[0], phase->metrology.current.I_history[0][0]);
    952                    adc_ptr++;
    953                  corrected = adc_i_buffer[0];
    954          #if GAIN_STAGES > 1
    955                  if ((corrected >= ADC_MAX  ||  corrected <= ADC_MIN))
    956                  {
    957                      phase->metrology.current.stage_hits = 100;
    958                      phase->metrology.current.stage_in_use = 1;
    959                  }
    960                  else
    961                  {
    962                      if (phase->metrology.current.stage_hits)
    963                      {
    964                          if (--phase->metrology.current.stage_hits == 0)
    965                              phase->metrology.current.stage_in_use = 0;
    966                      }
    967                  }
    968                  use_stage = phase->metrology.current.stage_in_use;
    969          #else
    970                  if ((corrected >= I_ADC_MAX  ||  corrected <= I_ADC_MIN)  &&  phase->metrology.current.I_endstops)
    971                      phase->metrology.current.I_endstops--;
    972          #endif
    973                  phase->metrology.current.I_history[0][0] = corrected;
    974          #if GAIN_STAGES > 1
    975                  corrected = dc_filter(&phase->metrology.current.I_dc_estimate[1], phase->metrology.current.I_history[1][0]);
    976                  if (use_stage)
    977                      I_live_sample = corrected;
    978                  corrected = adc_buffer[++adc_ptr];
    979                  if ((corrected >= ADC_MAX  ||  corrected <= ADC_MIN)  &&  phase->metrology.current.I_endstops)
    980                      phase->metrology.current.I_endstops--;
    981                  phase->metrology.current.I_history[1][1] = corrected;
    982          #endif
    983          #if defined(IRMS_SUPPORT)  ||  defined(POWER_FACTOR_SUPPORT)
    984                  //MM24
    985                  //accum48(phase->metrology.current.dot_prod.I_sq[use_stage], imul16(I_live_sample, I_live_sample));
    986                  sqac_current(phase->metrology.current.dot_prod.I_sq, I_live_sample);
    987          #endif
    988                  if (operating_mode == OPERATING_MODE_NORMAL)
    989                  {
    990                      /* Perform phase shift compensation, to allow for the time
    991                         between ADC samplings, internal phase shifts in CTs, etc.
    992                         This uses a 1 tap FIR (basically an interpolator/extrapolator) */
    993          #if defined(PHASE_CORRECTION_SUPPORT)
    994              #if defined(__MSP430_HAS_ADC12__)  ||  defined(__MSP430_HAS_ADC10__)
    995                      corrected = Q1_15_mul(phase->metrology.V_history[(phase->metrology.V_history_index - phase->metrology.current.in_phase_correction[use_stage].step - 1) & V_HISTORY_MASK], phase->metrology.current.in_phase_correction[use_stage].fir_beta)
    996                                + phase->metrology.V_history[(phase->metrology.V_history_index - phase->metrology.current.in_phase_correction[use_stage].step) & V_HISTORY_MASK];
    997              #else
    998                      //MM24
    999                      //corrected = phase->metrology.V_history[(phase->metrology.V_history_index - phase->metrology.current.in_phase_correction[use_stage].step) & V_HISTORY_MASK];
   1000                      V_corrected = phase->metrology.V_history[(phase->metrology.V_history_index - phase->metrology.current.in_phase_correction[use_stage].step) & V_HISTORY_MASK];
   1001              #endif
   1002                      //MM24
   1003                      //accum48(phase->metrology.current.dot_prod.P_active[use_stage], imul16(corrected, I_live_sample));
   1004                      mac_power(phase->metrology.current.dot_prod.P_active, V_corrected, I_live_sample);
   1005                        
   1006          #else
   1007                      corrected = V_sample;
   1008                      //MM24
   1009                      //accum48(phase->metrology.current.dot_prod.P_active[use_stage], imul16(V_sample, I_live_sample));
   1010                      mac_power(phase->metrology.current.dot_prod.P_active, V_corrected, I_live_sample);
   1011                        
   1012          #endif
   1013                      //accum48(phase->metrology.current.dot_prod.P_active[use_stage], imul16(I_live_sample, I_live_sample));
   1014                      //accum48(phase->metrology.current.dot_prod.P_active[0], imul16(corrected, corrected));
   1015                      //accum48(phase->metrology.current.dot_prod.P_active[0], imul16(V_sample, V_sample));
   1016          #if defined(REACTIVE_POWER_BY_QUADRATURE_SUPPORT)
   1017              #if defined(__MSP430_HAS_ADC12__)  ||  defined(__MSP430_HAS_ADC10__)
   1018                      corrected = Q1_15_mul(
   1019                                  phase->metrology.V_history[(phase->metrology.V_history_index - phase->metrology.current.quadrature_correction[use_stage].step - 1) & V_HISTORY_MASK],
   1020                                  phase->metrology.current.quadrature_correction[use_stage].fir_beta
   1021                                           )
   1022                                + phase->metrology.V_history[(phase->metrology.V_history_index - phase->metrology.current.quadrature_correction[use_stage].step    ) & V_HISTORY_MASK];
   1023              #else
   1024                      //MM
   1025          //            corrected = (Q1_15_mul(phase->metrology.V_history[(phase->metrology.V_history_index - phase->metrology.current.quadrature_correction[use_stage].step - 1) & V_HISTORY_MASK], phase->metrology.current.quadrature_correction[use_stage].fir_beta) >> 1)
   1026          //                      + (phase->metrology.V_history[(phase->metrology.V_history_index - phase->metrology.current.quadrature_correction[use_stage].step) & V_HISTORY_MASK] >> 1);
   1027                      V_quad_corrected = (Q1_15_mul(phase->metrology.V_history[(phase->metrology.V_history_index - phase->metrology.current.quadrature_correction[use_stage].step - 1) & V_HISTORY_MASK], phase->metrology.current.quadrature_correction[use_stage].fir_beta) >> 1)
   1028                                            + (phase->metrology.V_history[(phase->metrology.V_history_index - phase->metrology.current.quadrature_correction[use_stage].step) & V_HISTORY_MASK] >> 1);
   1029                         //accum48(phase->metrology.current.dot_prod.P_reactive, imul16(corrected, I_live_sample));
   1030              #endif
   1031                      //MM24
   1032                      //accum48(phase->metrology.current.dot_prod.P_reactive[use_stage], imul16(corrected, I_live_sample));
   1033                      mac_power(phase->metrology.current.dot_prod.P_reactive, V_quad_corrected, I_live_sample);
   1034          #endif
   1035                  }
   1036                  ++phase->metrology.current.dot_prod.sample_count;
   1037          
   1038          #if defined(SINGLE_PHASE)  &&  defined(NEUTRAL_MONITOR_SUPPORT)
   1039                  //I_neutral_sample = dc_filter(&phase->metrology.neutral.I_dc_estimate[0], phase->metrology.neutral.I_history[0][0]);
   1040                  //MM24
   1041                  //corrected = adc_buffer[++adc_ptr];
   1042                  corrected = adc_i_buffer[1];
   1043                  //MM24
   1044                  if ((corrected >= I_ADC_MAX  ||  corrected <= I_ADC_MIN)  &&  neutral.metrology.I_endstops)
   1045                      phase->metrology.neutral.I_endstops--;
   1046                  //for (k = 0;  k < I_HISTORY_STEPS - 1;  k++)
   1047                  //    phase->metrology.neutral.I_history[0][k] = phase->metrology.neutral.I_history[0][k + 1];
   1048                  //phase->metrology.neutral.I_history[0][I_HISTORY_STEPS - 1] = corrected;
   1049                  //phase->metrology.neutral.I_history[0][0] = corrected;
   1050                  I_live_sample = corrected; 
   1051                  I_live_sample = dc_filter_current(neutral.metrology.I_dc_estimate[0], I_live_sample);
   1052                  //accum48(neutral.metrology.I_sq_accum[0], imul16(I_live_sample, I_live_sample));
   1053                   sqac_current(neutral.metrology.I_sq_accum, I_live_sample);
   1054              #if defined(IRMS_SUPPORT)  ||  defined(POWER_FACTOR_SUPPORT)
   1055                  accum48(phase->metrology.neutral.dot_prod.I_sq[0], imul16(I_neutral_sample, I_neutral_sample));
   1056              #endif
   1057                  if (operating_mode == OPERATING_MODE_NORMAL)
   1058                  {
   1059              #if defined(PHASE_CORRECTION_SUPPORT)
   1060                  #if defined(__MSP430_HAS_ADC12__)  ||  defined(__MSP430_HAS_ADC10__)
   1061                      corrected = Q1_15_mulq(phase->metrology.V_history[(phase->metrology.V_history_index - phase->metrology.neutral.in_phase_correction[use_stage].step - 1) & V_HISTORY_MASK], phase->metrology.neutral.in_phase_correction[use_stage].fir_beta)
   1062                                + phase->metrology.V_history[(phase->metrology.V_history_index - phase->metrology.neutral.in_phase_correction[use_stage].step) & V_HISTORY_MASK];
   1063                  #else
   1064                      corrected = phase->metrology.V_history[(phase->metrology.V_history_index - phase->metrology.neutral.in_phase_correction[use_stage].step) & V_HISTORY_MASK];
   1065                  #endif
   1066              #else
   1067                      corrected = V_sample;
   1068              #endif
   1069                      accum48(phase->metrology.neutral.dot_prod.P_active[0], imul16(corrected, I_neutral_sample));
   1070              #if defined(REACTIVE_POWER_BY_QUADRATURE_SUPPORT)
   1071                      corrected = (Q1_15_mulq(phase->metrology.V_history[(phase->metrology.V_history_index - phase->metrology.neutral.quadrature_correction[use_stage].step - 1) & V_HISTORY_MASK], phase->metrology.neutral.quadrature_correction[use_stage].fir_beta) >> 1)
   1072                                + (phase->metrology.V_history[(phase->metrology.V_history_index - phase->metrology.neutral.quadrature_correction[use_stage].step) & V_HISTORY_MASK] >> 1);
   1073                      accum48(phase->metrology.neutral.dot_prod.P_reactive[0], imul16(corrected, I_neutral_sample));
   1074              #endif
   1075                  }
   1076                  ++phase->metrology.neutral.dot_prod.sample_count;
   1077          #endif
   1078          #if defined(REACTIVE_POWER_BY_QUADRATURE_SUPPORT)  ||  defined(PHASE_CORRECTION_SUPPORT)
   1079                  phase->metrology.V_history_index = (phase->metrology.V_history_index + 1) & V_HISTORY_MASK;
   1080          #endif
   1081                  ++phase->metrology.dot_prod.sample_count;
   1082          
   1083          #if defined(PER_PHASE_ACTIVE_ENERGY_SUPPORT)
   1084                  /* We now play the last measurement interval's power level, evaluated
   1085                     in the foreground, through this measurement interval. In this way
   1086                     we can evenly pace the pulsing of the LED. The only error produced
   1087                     by this is the ambiguity in the number of samples per measurement.
   1088                     This should not exceed 1 or 2 in over 4000. */
   1089              #if defined(LIMP_MODE_SUPPORT)
   1090                  if (operating_mode == OPERATING_MODE_NORMAL)
   1091                  {
   1092              #endif
   1093              #if defined(INHIBIT_NEGATIVE_PHASE_POWER_ACCUMULATION)
   1094                      if (phase->readings.active_power > 0  &&  (phase->active_power_counter += phase->readings.active_power) >= PHASE_ENERGY_PULSE_THRESHOLD)
   1095              #else
   1096                      if ((phase->active_power_counter += phase->readings.active_power) >= PHASE_ENERGY_PULSE_THRESHOLD)
   1097              #endif
   1098                      {
   1099                          phase->active_power_counter -= PHASE_ENERGY_PULSE_THRESHOLD;
   1100                          ++phase->consumed_active_energy;
   1101                          /* Ideally we want to log the energy each kWh unit, but doing
   1102                             it with a mask here is good enough and faster. */
   1103                          if ((phase->consumed_active_energy & 0x3FF) == 0)
   1104                              phase->status |= ENERGY_LOGABLE;
   1105                          /* Pulse the indicator. Long pulses may not be reliable, as at full
   1106                             power we may be pulsing several times per second. People may
   1107                             check the meter's calibration with an instrument that counts
   1108                             the pulsing rate, so it is important the pulses are clear,
   1109                             distinct, and exactly at the rate of one per
   1110                             1/ENERGY_PULSES_PER_KW_HOUR kW/h. */
   1111              #if !defined(SINGLE_PHASE)
   1112                          switch (j)
   1113                          {
   1114                          case 0:
   1115                              phase_1_active_energy_pulse_start();
   1116                              break;
   1117                          case 1:
   1118                              phase_2_active_energy_pulse_start();
   1119                              break;
   1120                          case 2:
   1121                              phase_3_active_energy_pulse_start();
   1122                              break;
   1123                          }
   1124              #else
   1125                          phase_active_energy_pulse_start();
   1126              #endif
   1127                          phase->active_energy_pulse_remaining_time = ENERGY_PULSE_DURATION;
   1128                      }
   1129                      if (phase->active_energy_pulse_remaining_time  &&  --phase->active_energy_pulse_remaining_time == 0)
   1130                      {
   1131              #if !defined(SINGLE_PHASE)
   1132                          switch (j)
   1133                          {
   1134                          case 0:
   1135                              phase_1_active_energy_pulse_end();
   1136                              break;
   1137                          case 1:
   1138                              phase_2_active_energy_pulse_end();
   1139                              break;
   1140                          case 2:
   1141                              phase_3_active_energy_pulse_end();
   1142                              break;
   1143                          }
   1144              #else
   1145                          phase_active_energy_pulse_end();
   1146              #endif
   1147                      }
   1148              #if defined(LIMP_MODE_SUPPORT)
   1149                  }
   1150                  else
   1151                  {
   1152                      if ((phase->active_power_counter += LIMP_SAMPLING_RATIO*phase->readings.active_power) >= PHASE_ENERGY_PULSE_THRESHOLD)
   1153                      {
   1154                          phase->active_power_counter -= PHASE_ENERGY_PULSE_THRESHOLD;
   1155                          ++phase->consumed_active_energy;
   1156                          if ((phase->consumed_active_energy & 0x3FF) == 0)
   1157                              phase->status |= ENERGY_LOGABLE;
   1158                  #if !defined(SINGLE_PHASE)
   1159                          switch (j)
   1160                          {
   1161                          case 0:
   1162                              phase_1_active_energy_pulse_end();
   1163                              //set_phase_1_energy_pulse_indicator();
   1164                              break;
   1165                          case 1:
   1166                              phase_2_active_energy_pulse_end();
   1167                            //set_phase_2_energy_pulse_indicator();
   1168                              break;
   1169                          case 2:
   1170                              phase_3_active_energy_pulse_end();
   1171                             // set_phase_3_energy_pulse_indicator();
   1172                              break;
   1173                          }
   1174                  #else
   1175                          set_energy_pulse_indicator();
   1176                  #endif
   1177                          phase->active_energy_pulse_remaining_time = ENERGY_PULSE_DURATION;
   1178                      }
   1179                      if (phase->active_energy_pulse_remaining_time  &&  (phase->active_energy_pulse_remaining_time -= LIMP_SAMPLING_RATIO) == 0)
   1180                      {
   1181                  #if !defined(SINGLE_PHASE)
   1182                          switch (j)
   1183                          {
   1184                          case 0:
   1185                            phase_1_active_energy_pulse_start();
   1186          //                  clr_phase_1_energy_pulse_indicator();
   1187                              break;
   1188                          case 1:
   1189                                phase_2_active_energy_pulse_start();
   1190                            //  clr_phase_2_energy_pulse_indicator();
   1191                              break;
   1192                          case 2:
   1193                              phase_3_active_energy_pulse_start();
   1194                              //clr_phase_3_energy_pulse_indicator();
   1195                              break;
   1196                          }
   1197                  #else
   1198                          clr_energy_pulse_indicator();
   1199                  #endif
   1200                      }
   1201                  }
   1202              #endif
   1203          #endif
   1204                  /* Do the power cycle start detection */
   1205                  /* There is no hysteresis used here, but since the signal is
   1206                     changing rapidly at the zero crossings, and is always of
   1207                     large amplitude, miscounting cycles due to general noise
   1208                     should not occur. Spikes are another matter. A large spike
   1209                     could cause the power cycles to be miscounted, but does not
   1210                     matter very much. The cycle counting is not critical to power
   1211                     or energy measurement. */
   1212          #if defined(MAINS_FREQUENCY_SUPPORT)
   1213              #if defined(LIMP_MODE_SUPPORT)
   1214                  if (operating_mode == OPERATING_MODE_LIMP)
   1215                      phase->metrology.cycle_sample_count += LIMP_SAMPLING_RATIO*256;
   1216                  else
   1217              #endif
   1218                      phase->metrology.cycle_sample_count += 256;
   1219          #endif
   1220                  if (abs(V_sample - phase->metrology.last_V_sample) <= phase->metrology.since_last*MAX_PER_SAMPLE_VOLTAGE_SLEW)
   1221                  {
   1222                      /* This doesn't look like a spike - do mains cycle detection, and
   1223                         estimate the precise mains period */
   1224                      if (V_sample < 0)
   1225                      {
   1226                          /* Log the sign of the signal */
   1227                          phase->status &= ~V_POS;
   1228                      }
   1229                      else
   1230                      {
   1231                          if (!(phase->status & V_POS))
   1232                          {
   1233          #if defined(MAINS_FREQUENCY_SUPPORT)
   1234                              /* Apply limits to the sample count, to avoid spikes or dying power lines disturbing the
   1235                                 frequency reading too much */
   1236                              /* The mains should be <40Hz or >70Hz to fail this test! */
   1237                              if (256*SAMPLES_PER_10_SECONDS/700 <= phase->metrology.cycle_sample_count  &&  phase->metrology.cycle_sample_count <= 256*SAMPLES_PER_10_SECONDS/400)
   1238                              {
   1239                                  /* A mains frequency measurement procedure based on interpolating zero crossings,
   1240                                     to get a fast update rate for step changes in the mains frequency */
   1241                                  /* Interpolate the zero crossing by successive approx. */
   1242                                  z = V_sample - phase->metrology.last_V_sample;
   1243                                  x = 0;
   1244                                  y = 0;
   1245                                  for (k = 0;  k < 8;  k++)
   1246                                  {
   1247                                      y <<= 1;
   1248                                      z >>= 1;
   1249                                      x += z;
   1250                                      if (x > V_sample)
   1251                                          x -= z;
   1252                                      else
   1253                                          y |= 1;
   1254                                  }
   1255                                  /* Now we need to allow for skipped samples, due to spike detection */
   1256                                  z = y;
   1257                                  while (phase->metrology.since_last > 1)
   1258                                  {
   1259                                      z += y;
   1260                                      phase->metrology.since_last--;
   1261                                  }
   1262                                  /* z is now the fraction of a sample interval between the zero
   1263                                     crossing and the current sample, in units of 1/256 of a sample */
   1264                                  /* A lightly damped filter should now be enough to remove noise and get a
   1265                                     stable value for the frequency */
   1266                                  phase->metrology.mains_period += ((int32_t) (phase->metrology.cycle_sample_count - z) << 12) - (phase->metrology.mains_period >> 4);
   1267                                  /* Start the next cycle with the residual fraction of a sample */
   1268                                  phase->metrology.cycle_sample_count = z;
   1269                              }
   1270                              else
   1271                              {
   1272                                  phase->metrology.cycle_sample_count = 0;
   1273                              }
   1274          #endif
   1275          #if defined(POWER_FACTOR_SUPPORT)
   1276                              /* Determine whether the current leads or lags, in a noise tolerant manner.
   1277                                 Testing 50 cycles means we will respond in about one second to a genuine
   1278                                 swap between lead and lag. Since that is also about the length of our
   1279                                 measurement blocks, this seems a sensible response time. */
   1280                              if (I_live_sample < V_sample)
   1281                              {
   1282                                  if (phase->metrology.current.leading > -50)
   1283                                      phase->metrology.current.leading--;
   1284                              }
   1285                              else
   1286                              {
   1287                                  if (phase->metrology.current.leading < 50)
   1288                                      phase->metrology.current.leading++;
   1289                              }
   1290              #if defined(SINGLE_PHASE)  &&  defined(NEUTRAL_MONITOR_SUPPORT)
   1291                              if (I_neutral_sample < V_sample)
   1292                              {
   1293                                  if (phase->metrology.neutral.leading > -50)
   1294                                      phase->metrology.neutral.leading--;
   1295                              }
   1296                              else
   1297                              {
   1298                                  if (phase->metrology.neutral.leading < 50)
   1299                                      phase->metrology.neutral.leading++;
   1300                              }
   1301              #endif
   1302          #endif
   1303                              /* See if a sufficiently long measurement interval has been
   1304                                 recorded, and catch the start of the next cycle. We do not
   1305                                 really care how many cycles there are, as long as the block
   1306                                 is a reasonable length. Setting a minimum of 1 second is
   1307                                 better than counting cycles, as it is not affected by noise
   1308                                 spikes. Synchronising to a whole number of cycles reduces
   1309                                 block to block jitter, though it doesn't affect the long
   1310                                 term accuracy of the measurements. */
   1311                              if (phase->metrology.dot_prod.sample_count >= samples_per_second)
   1312                              {
   1313          #if defined(SINGLE_PHASE)
   1314                                  log_parameters();
   1315          #else
   1316                                  log_parameters(phase);
   1317          #endif
   1318          #if defined(__MSP430__)
   1319                                  /* The foreground may be conserving power (e.g. in limp mode), so we
   1320                                     need to kick it. */
   1321                                  _BIC_SR_IRQ(LPM0_bits);
   1322          #else
   1323                                 /* When run as a host program there is no RTC, but we still need to
   1324                                    kick the foreground somehow. */
   1325                                  meter_status |= TICKER;
   1326          #endif
   1327                              }
   1328                          }
   1329                          /* Log the sign of the signal */
   1330                          phase->status |= V_POS;
   1331                      }
   1332                      phase->metrology.since_last = 0;
   1333                      phase->metrology.last_V_sample = V_sample;
   1334                  }
   1335                  phase->metrology.since_last++;
   1336          
   1337                  if (phase->metrology.dot_prod.sample_count >= samples_per_second + 200)
   1338                  {
   1339                      /* We don't seem to be detecting the end of a mains cycle, so force
   1340                         the end of processing block condition. */
   1341          #if defined(SINGLE_PHASE)
   1342                      log_parameters();
   1343          #else
   1344                      log_parameters(phase);
   1345          #endif
   1346          #if defined(__MSP430__)
   1347                      /* The foreground may be conserving power (e.g. in limp mode), so we
   1348                         need to kick it. */
   1349                      _BIC_SR_IRQ(LPM0_bits);
   1350          #else
   1351                      /* When run as a host program there is no RTC, but we still need to
   1352                         kick the foreground somehow. */
   1353                      meter_status |= TICKER;
   1354          #endif
   1355                  }
   1356          #if defined(MAINS_FREQUENCY_SUPPORT)
   1357                  /* Monitor the cycles and frequency of the current sensors, as limp
   1358                     mode is based on these. */
   1359              #if defined(LIMP_MODE_SUPPORT)
   1360                  if (operating_mode == OPERATING_MODE_LIMP)
   1361                      phase->metrology.current.cycle_sample_count += 256*LIMP_SAMPLING_RATIO;
   1362                  else
   1363              #endif
   1364                      phase->metrology.current.cycle_sample_count += 256;
   1365          #endif
   1366                  if (I_live_sample < 0)
   1367                  {
   1368                      /* Log the sign of the signal */
   1369                      phase->status &= ~I_POS;
   1370                  }
   1371                  else
   1372                  {
   1373                      if (!(phase->status & I_POS))
   1374                      {
   1375                          /* A negative to positive transition has occurred. Trust it
   1376                             blindly as a genuine zero crossing/start of cycle, even
   1377                             though it might really be due to a noise spike. */
   1378          #if defined(MAINS_FREQUENCY_SUPPORT)
   1379                          if (SAMPLES_PER_10_SECONDS/700 <= phase->metrology.current.cycle_sample_count  &&  phase->metrology.current.cycle_sample_count <= SAMPLES_PER_10_SECONDS/400)
   1380                              phase->metrology.current.mains_period += ((int32_t) phase->metrology.current.cycle_sample_count << 16) - (phase->metrology.current.mains_period >> 8);
   1381                          phase->metrology.current.cycle_sample_count = 0;
   1382          #endif
   1383                      }
   1384                      /* Log the sign of the signal */
   1385                      phase->status |= I_POS;
   1386                  }
   1387          #if defined(SINGLE_PHASE)  &&  defined(NEUTRAL_MONITOR_SUPPORT)
   1388              #if defined(MAINS_FREQUENCY_SUPPORT)
   1389                  #if defined(LIMP_MODE_SUPPORT)
   1390                  if (operating_mode == OPERATING_MODE_LIMP)
   1391                      phase->metrology.neutral.cycle_sample_count += LIMP_SAMPLING_RATIO;
   1392                  else
   1393                  #endif
   1394                      phase->metrology.neutral.cycle_sample_count++;
   1395              #endif
   1396                  if (I_neutral_sample < 0)
   1397                  {
   1398                      /* Log the sign of the signal */
   1399                      phase->status &= ~I_NEUTRAL_POS;
   1400                  }
   1401                  else
   1402                  {
   1403                      if (!(phase->status & I_NEUTRAL_POS))
   1404                      {
   1405                          /* A negative to positive transition has occurred. Trust it
   1406                             blindly as a genuine zero crossing/start of cycle, even
   1407                             though it might really be due to a noise spike. */
   1408              #if defined(MAINS_FREQUENCY_SUPPORT)
   1409                          if (SAMPLES_PER_10_SECONDS/700 <= phase->metrology.neutral.cycle_sample_count  &&  phase->metrology.neutral.cycle_sample_count <= SAMPLES_PER_10_SECONDS/400)
   1410                              phase->metrology.neutral.mains_period += ((int32_t) phase->metrology.neutral.cycle_sample_count << 16) - (phase->metrology.neutral.mains_period >> 8);
   1411                          phase->metrology.neutral.cycle_sample_count = 0;
   1412              #endif
   1413                      }
   1414                      /* Log the sign of the signal */
   1415                      phase->status |= I_NEUTRAL_POS;
   1416                  }
   1417          #endif
   1418          #if !defined(SINGLE_PHASE)
   1419                  phase++;
   1420              }
   1421          #endif
   1422          
   1423          #if !defined(SINGLE_PHASE)  &&  defined(NEUTRAL_MONITOR_SUPPORT)  &&  defined(IRMS_SUPPORT)
   1424              /* For multi-phase meters, neutral monitoring is limited to measuring the
   1425                 RMS current. */
   1426              corrected = adc_buffer[++adc_ptr];
   1427              if ((corrected >= I_ADC_MAX  ||  corrected <= I_ADC_MIN)  &&  neutral.metrology.I_endstops)
   1428                  neutral.metrology.I_endstops--;
   1429              I_live_sample = corrected; // - adc_buffer[--adc_ptr];
   1430              I_live_sample = dc_filter(&neutral.metrology.I_dc_estimate[0], I_live_sample);
   1431              accum48(neutral.metrology.I_sq_accum[0], imul16(I_live_sample, I_live_sample));
   1432              if (++neutral.metrology.sample_count >= samples_per_second)
   1433                  log_neutral_parameters();
   1434          #endif
   1435          
   1436          #if defined(TOTAL_ACTIVE_ENERGY_SUPPORT)
   1437              /* We now play the last measurement interval's power level, evaluated
   1438                 in the foreground, through this measurement interval. In this way
   1439                 we can evenly pace the pulsing of the LED. The only error produced
   1440                 by this is the ambiguity in the number of samples per measurement.
   1441                 This should not exceed 1 or 2 in over 4000. */
   1442              #if defined(LIMP_MODE_SUPPORT)
   1443              if (operating_mode == OPERATING_MODE_NORMAL)
   1444              {
   1445              #endif
   1446          
   1447              #if defined(INHIBIT_NEGATIVE_TOTAL_POWER_ACCUMULATION)
   1448                  if (total_active_power > 0  &&  (total_active_power_counter += total_active_power) >= TOTAL_ENERGY_PULSE_THRESHOLD)
   1449              #else
   1450                  if ((total_active_power_counter += total_active_power) >= TOTAL_ENERGY_PULSE_THRESHOLD)
   1451              #endif
   1452                  {
   1453                      total_active_power_counter -= TOTAL_ENERGY_PULSE_THRESHOLD;
   1454              #if TOTAL_ENERGY_PULSES_PER_KW_HOUR < 1000
   1455                      if (++extra_total_active_power_counter >= 16)
   1456                      {
   1457                          extra_total_active_power_counter = 0;
   1458              #endif
   1459                          ++total_consumed_active_energy;
   1460                          /* Ideally we want to log the energy each kWh unit, but doing
   1461                             it with a mask here is good enough and faster. */
   1462                          if ((total_consumed_active_energy & 0x3FF) == 0)
   1463                              phase->status |= ENERGY_LOGABLE;
   1464                          /* Pulse the LED. Long pulses may not be reliable, as at full
   1465                             power we may be pulsing many times per second. People may
   1466                             check the meter's calibration with an instrument that counts
   1467                             the pulsing rate, so it is important the pulses are clear,
   1468                             distinct, and exactly at the rate of one per
   1469                             1/ENERGY_PULSES_PER_KW_HOUR kW/h. */
   1470              #if defined(total_active_energy_pulse_start)
   1471                  #if defined(FINE_ENERGY_PULSE_TIMING_SUPPORT)
   1472                          /* TODO: This will not work if extra_total_active_power_counter is in use */
   1473                          /* Work out the fraction of an ADC interrupt, in 1/10ths of an ADC interrupt period,
   1474                             at which the real transition occurs */
   1475                          /* Break up the loop a bit, for efficiency */
   1476                          xxx = total_active_power_counter << 1;
   1477                          j = 10;
   1478                          if (xxx >= total_active_power)
   1479                          {
   1480                              xxx -= total_active_power;
   1481                              j = 5;
   1482                          }
   1483                          xxx += (xxx << 2);
   1484                          do
   1485                              j--;
   1486                          while ((xxx -= total_active_power) > 0)
   1487                              ;
   1488                          /* j is now our fraction of an ADC interrupt. If we use this right now to control timer A
   1489                             its effect would be indeterminate. We need timer A to be updated at the very start of an
   1490                             ADC interrupt service, to ensure the fraction of an ADC interrupt is programmed into the
   1491                             timer while its count is at a well defined value - zero. */
   1492                          fine_pulse_operation = OUTMOD_5 | SCS;
   1493                          TACCR2 = j;
   1494                  #else
   1495                          total_active_energy_pulse_start();
   1496                  #endif
   1497                          total_active_energy_pulse_remaining_time = ENERGY_PULSE_DURATION;
   1498              #endif
   1499              #if defined(MULTI_RATE_SUPPORT)
   1500                          multirate_energy_pulse();
   1501              #endif
   1502              #if TOTAL_ENERGY_PULSES_PER_KW_HOUR < 1000
   1503                      }
   1504              #endif
   1505                  }
   1506              #if defined(total_active_energy_pulse_start)
   1507                  if (total_active_energy_pulse_remaining_time  &&  --total_active_energy_pulse_remaining_time == 0)
   1508                  {
   1509                  #if defined(FINE_ENERGY_PULSE_TIMING_SUPPORT)
   1510                      /* Turn off the indicator at the next CCR2 match. */
   1511                      fine_pulse_operation = OUTMOD_1 | SCS;
   1512                      /* Leave TACCR2 alone, and we should get the same offset as last time, resulting in even length pulses */
   1513                  #else
   1514                      total_active_energy_pulse_end();
   1515                  #endif
   1516                  }
   1517              #endif
   1518          
   1519              #if defined(INHIBIT_NEGATIVE_TOTAL_POWER_ACCUMULATION)
   1520                  if (total_reactive_power > 0  &&  (total_reactive_power_counter += total_reactive_power) >= TOTAL_ENERGY_PULSE_THRESHOLD)
   1521              #else
   1522                  if ((total_reactive_power_counter += total_reactive_power) >= TOTAL_ENERGY_PULSE_THRESHOLD)
   1523              #endif
   1524                  {
   1525                      total_reactive_power_counter -= TOTAL_ENERGY_PULSE_THRESHOLD;
   1526              #if TOTAL_ENERGY_PULSES_PER_KW_HOUR < 1000
   1527                      if (++extra_total_reactive_power_counter >= 16)
   1528                      {
   1529                          extra_total_reactive_power_counter = 0;
   1530              #endif
   1531                          ++total_consumed_reactive_energy;
   1532                          /* Ideally we want to log the energy each kWh unit, but doing
   1533                             it with a mask here is good enough and faster. */
   1534                          if ((total_consumed_reactive_energy & 0x3FF) == 0)
   1535                              phase->status |= ENERGY_LOGABLE;
   1536                          /* Pulse the LED. Long pulses may not be reliable, as at full
   1537                             power we may be pulsing many times per second. People may
   1538                             check the meter's calibration with an instrument that counts
   1539                             the pulsing rate, so it is important the pulses are clear,
   1540                             distinct, and exactly at the rate of one per
   1541                             1/ENERGY_PULSES_PER_KW_HOUR kW/h. */
   1542              #if defined(total_reactive_energy_pulse_start)
   1543                  #if defined(FINE_ENERGY_PULSE_TIMING_SUPPORT)
   1544                          /* TODO: This will not work if extra_total_active_power_counter is in use */
   1545                          /* Work out the fraction of an ADC interrupt, in 1/10ths of an ADC interrupt period,
   1546                             at which the real transition occurs */
   1547                          /* Break up the loop a bit, for efficiency */
   1548                          xxx = total_reactive_power_counter << 1;
   1549                          j = 10;
   1550                          if (xxx >= total_reactive_power)
   1551                          {
   1552                              xxx -= total_reactive_power;
   1553                              j = 5;
   1554                          }
   1555                          xxx += (xxx << 2);
   1556                          do
   1557                              j--;
   1558                          while ((xxx -= total_reactive_power) > 0);
   1559                          /* j is now our fraction of an ADC interrupt. If we use this right now to control timer A
   1560                             its effect would be indeterminate. We need timer A to be updated at the very start of an
   1561                             ADC interrupt service, to ensure the fraction of an ADC interrupt is programmed into the
   1562                             timer while its count is at a well defined value - zero. */
   1563                          fine_pulse_operation = OUTMOD_5 | SCS;
   1564                          TACCR2 = j;
   1565                  #else
   1566                          total_reactive_energy_pulse_start();
   1567                  #endif
   1568                          total_reactive_energy_pulse_remaining_time = ENERGY_PULSE_DURATION;
   1569              #endif
   1570              #if TOTAL_ENERGY_PULSES_PER_KW_HOUR < 1000
   1571                      }
   1572              #endif
   1573                  }
   1574              #if defined(total_reactive_energy_pulse_end)
   1575                  if (total_reactive_energy_pulse_remaining_time  &&  --total_reactive_energy_pulse_remaining_time == 0)
   1576                  {
   1577                  #if defined(FINE_ENERGY_PULSE_TIMING_SUPPORT)
   1578                      /* Turn off the LED at the next TACCR2 match. */
   1579                      fine_pulse_operation = OUTMOD_1 | SCS;
   1580                      /* Leave TACCR2 alone, and we should get the same offset as last time, resulting in even length pulses */
   1581                  #else
   1582                      total_reactive_energy_pulse_end();
   1583                  #endif
   1584                  }
   1585              #endif
   1586          
   1587              #if defined(LIMP_MODE_SUPPORT)
   1588              }
   1589              else
   1590              {
   1591                  if ((total_active_power_counter += LIMP_SAMPLING_RATIO*total_active_power) >= TOTAL_ENERGY_PULSE_THRESHOLD)
   1592                  {
   1593                      total_active_power_counter -= TOTAL_ENERGY_PULSE_THRESHOLD;
   1594                  #if TOTAL_ENERGY_PULSES_PER_KW_HOUR < 1000
   1595                      if (++extra_total_active_power_counter >= 16)
   1596                      {
   1597                          extra_total_active_power_counter = 0;
   1598                  #endif
   1599                          ++total_consumed_active_energy;
   1600                          if ((total_consumed_active_energy & 0x3FF) == 0)
   1601                              phase->status |= ENERGY_LOGABLE;
   1602                          phase_active_energy_pulse_start();
   1603                  #if defined(total_active_energy_pulse_start)
   1604                          total_active_energy_pulse_start();
   1605                          total_active_energy_pulse_remaining_time = ENERGY_PULSE_DURATION;
   1606                  #endif
   1607                  #if TOTAL_ENERGY_PULSES_PER_KW_HOUR < 1000
   1608                      }
   1609                  #endif
   1610                  }
   1611                  #if defined(total_active_energy_pulse_end)
   1612                  if (total_active_energy_pulse_remaining_time  &&  (total_active_energy_pulse_remaining_time -= LIMP_SAMPLING_RATIO) == 0)
   1613                  {
   1614                      total_active_energy_pulse_end();
   1615                  }
   1616                  #endif
   1617              }
   1618              #endif
   1619          #endif
   1620          
   1621              custom_adc_interrupt();
   1622          
   1623          #if defined(x__MSP430__)
   1624              #if defined(POWER_DOWN_SUPPORT)  &&  defined(POWER_UP_BY_SUPPLY_SENSING)
   1625              /* Select the lower threshold to watch for the power supply dying. */
   1626              CACTL1 = CAREF_1 | CAON;
   1627              #endif
   1628              #if defined(BASIC_KEYPAD_SUPPORT)  ||  defined(CUSTOM_KEYPAD_SUPPORT)
   1629              if (keypad_debounce())
   1630                  _BIC_SR_IRQ(LPM0_bits);
   1631              #endif
   1632          
   1633              #if defined(PWM_DITHERING_SUPPORT)
   1634              if (operating_mode == OPERATING_MODE_NORMAL)
   1635              {
   1636                  /* Only try to dither when in full operating mode.
   1637                     The dithering increases current consumtion a little! */
   1638                  /* Calculate new PWM duty cycle for the dithering */
   1639                  if ((meter_status & PWM_RAMPING_DOWN))
   1640                  {
   1641                      if (!(TBCCR1 == PWM_MID_POINT  &&  pwm_stutter--))
   1642                      {
   1643                          if (--TBCCR1 <= PWM_LOWER_LIMIT)
   1644                          {
   1645                              meter_status &= ~PWM_RAMPING_DOWN;
   1646                              /* Set a small randomised stutter for the cycle
   1647                                 of the triangular dithering waveform to avoid the
   1648                                 possibility of high correlation with the mains
   1649                                 waveform. */
   1650                              pwm_stutter = ((rndnum >> 8) & 0x7);
   1651                          }
   1652                      }
   1653                  }
   1654                  else
   1655                  {
   1656                      if (++TBCCR1 >= PWM_UPPER_LIMIT)
   1657                          meter_status |= PWM_RAMPING_DOWN;
   1658                  }
   1659              }
   1660              #endif
   1661              #if defined(DAC12_DITHERING_SUPPORT)
   1662              dac12_dith = (rand16() >> 1) & 0x7F;
   1663              DAC12_1DAT = dac12_dith2 + dac12_dith;
   1664              dac12_dith2 = dac12_dith;
   1665              #endif
   1666          
   1667              #if defined(POWER_DOWN_SUPPORT)  &&  defined(POWER_UP_BY_SUPPLY_SENSING)
   1668                  #if defined(__MSP430_HAS_COMPA__)
   1669              if ((CACTL2 & CAOUT))
   1670                  #else
   1671              /* Use an I/O pin to sense the power falling */
   1672              POWER_GOOD_THRESHOLD_LOW;
   1673              if (!POWER_GOOD_SENSE)
   1674                  #endif
   1675              {
   1676                  /* The comparator output can oscillate a little around the
   1677                     switching point, so we need to do some debouncing. */
   1678                  if (power_down_debounce < POWER_FAIL_DEBOUNCE + 1)
   1679                  {
   1680                      if (++power_down_debounce == POWER_FAIL_DEBOUNCE)
   1681                      {
   1682                          power_down_debounce = 0;
   1683                          /* The power is falling. We need to get to a low power
   1684                             consumption state now! The battery will be supplying the
   1685                             meter soon. */
   1686                          operating_mode = OPERATING_MODE_POWERFAIL;
   1687                  #if defined(__MSP430__)
   1688                          /* Get the foreground to respond quickly. It might be conserving
   1689                             power (e.g. in limp mode). */
   1690                          _BIC_SR_IRQ(LPM0_bits);
   1691                  #endif
   1692                      }
   1693                  }
   1694              }
   1695              else
   1696              {
   1697                  power_down_debounce = 0;
   1698              }
   1699                  #if defined(__MSP430_HAS_COMPA__)
   1700              CACTL1 &= ~(CAON);
   1701                  #endif
   1702              #endif
   1703          #endif
   1704          #if defined(MAGNETIC_INTERFERENCE_SUPPORT)
   1705              if (custom_magnetic_sensor_test())
   1706                  magnetic_sensor_count++;
   1707          #endif
   1708          
   1709          #if defined(__HAS_SD_ADC__)  &&  defined(SINGLE_PHASE)
   1710              /* There may be some current samples available, which we need to pick up */
   1711              #if defined(SINGLE_PHASE)  &&  defined(NEUTRAL_MONITOR_SUPPORT)
   1712              if ((TST_SD16IFG_NEUTRAL))
   1713              {
   1714                  adc_i_buffer[1] = SD16MEM_NEUTRAL;
   1715                  CLR_SD16IFG_NEUTRAL;
   1716              }
   1717              #endif
   1718              if ((TST_SD16IFG_LIVE))
   1719              {
   1720                  adc_i_buffer[0] = SD16MEM_LIVE;
   1721                  CLR_SD16IFG_LIVE;
   1722              }
   1723          #elif defined(__HAS_SD_ADC__)
   1724              /* There may be some current samples available, which we need to pick up */
   1725              if ((TST_SD16IFG_CURRENT_1))
   1726              {
   1727                  adc_i_buffer[1] = SD16MEM_CURRENT_1;
   1728                  CLR_SD16IFG_CURRENT_1;
   1729              }
   1730              if ((TST_SD16IFG_CURRENT_2))
   1731              {
   1732                  adc_buffer[3] = SD16MEM_CURRENT_2;
   1733                  CLR_SD16IFG_CURRENT_2;
   1734              }
   1735              if ((TST_SD16IFG_CURRENT_3))
   1736              {
   1737                  adc_buffer[5] = SD16MEM_CURRENT_3;
   1738                  CLR_SD16IFG_CURRENT_3;
   1739              }
   1740              #if defined(__MSP430_HAS_SD16_A7__)
   1741              if ((TST_SD16IFG_NEUTRAL))
   1742              {
   1743                  adc_buffer[6] = SD16MEM_NEUTRAL;
   1744                  CLR_SD16IFG_NEUTRAL;
   1745              }
   1746              #endif
   1747          #endif
   1748          
   1749          #if defined(MESH_NET_SUPPORT)
   1750              if (--rf_tick_count < 0)
   1751              {
   1752                  rf_tick_count = 52;
   1753                  rf_service = 1;
   1754              }
   1755          #endif
   1756              adc_interrupts++;
   1757          }
   1758          
   1759          #if defined(__MSP430__)  &&  defined(__MSP430_HAS_ADC12__)
   1760          /* Interrupt to dynamically enable the ADC in limp mode */
   1761          ISR(TIMERA1, adcx_interrupt)
   1762          {
   1763              /* Re-enable the ADC in time to take the next set of samples */
   1764              if ((TACCTL2 & CCIFG))
   1765              {
   1766                  //P2SEL &= ~BIT4;
   1767                  //P2OUT &= ~BIT4;
   1768                  TACCTL2 &= ~CCIFG;
   1769                  ADC12CTL0 |= (ENC | ADC12ON);
   1770              }
   1771          }
   1772          #endif
   1773          
   1774          #if defined(__MSP430__)  &&  defined(__HAS_SD_ADC__)  &&  defined(SINGLE_PHASE)
   1775          /* Interrupt to trigger the SD16 ADC in limp mode */
   1776          #if defined(TIMER0_A0_VECTOR)
   1777          ISR(TIMER0_A0, limp_trigger_interrupt)
   1778          #else
   1779          ISR(TIMERA0, limp_trigger_interrupt)
   1780          #endif
   1781          {
   1782              #if defined(RF_LINK_SUPPORT)
   1783              if (rf_timeout < 0)
   1784              {
   1785                  /* Enable the USART */
   1786                  U0ME |= (UTXE0 | URXE0);
   1787                  #if defined(__MSP430_HAS_FLLPLUS__)  ||  defined(__MSP430_HAS_FLLPLUS_SMALL__)
   1788                  /* Speed up the clock to 8.388608MHz */
   1789                  SCFI0 = SCFI0_HIGH;
   1790                  SCFQCTL = SCFQCTL_HIGH;
   1791                  #endif
   1792                  custom_rf_exchange();
   1793                  /* Disable the USART */
   1794                  U0ME &= ~(UTXE0 | URXE0);
   1795                  /* Disable the TIMER_A0 interrupt */
   1796                  TACTL = 0;
   1797                  TACCTL0 = 0;
   1798                  #if defined(__MSP430_HAS_FLLPLUS__)  ||  defined(__MSP430_HAS_FLLPLUS_SMALL__)
   1799                  /* Slow the clock to 1MHz as quickly as possible. The FLL will not be active
   1800                     in LPM3, so switch it off now, and force the FLL's RC oscillator to
   1801                     about 1MHz. The exact frequency is not critical. */
   1802                  _BIS_SR(SCG0);                  /* switch off FLL locking */
   1803                  SCFI0 = SCFI0_LOW;
   1804                  SCFQCTL = SCFQCTL_LOW | SCFQ_M;
   1805                  SCFI0 = 0x0;
   1806                  SCFI1 = 0x37;
   1807                  #endif
   1808                  rf_timeout = 0;
   1809              }
   1810              else
   1811              #endif
   1812              {
   1813                  /* Trigger the ADC to perform a single conversion from all inputs. */
   1814                  #if defined(SINGLE_PHASE)  &&  defined(NEUTRAL_MONITOR_SUPPORT)
   1815                  SD16PRE_NEUTRAL = 0;
   1816                  #endif
   1817                  SD16PRE_LIVE = 0;
   1818                  SD16PRE_VOLTAGE = DEFAULT_V_PRESCALE_FACTOR;
   1819                  SD16CCTL_VOLTAGE |= SD16_SC;
   1820              }
   1821          }
   1822          #endif
   1823          
   1824          #if defined(__MSP430__)  &&  defined(__MSP430_HAS_ADC10_A__)
   1825          /* Interrupt to handle the ADC10 */
   1826          ISR(ADC10, adc10_interrupt)
   1827          {
   1828              int16_t corrected;
   1829              if (operating_mode == OPERATING_MODE_NORMAL)
   1830              {
   1831                  #if defined(TEMPERATURE_SUPPORT)
   1832                  if (  (ADC10MCTL0 & ADC10INCH_15) == ADC10INCH_10)
   1833                  {
   1834                  corrected = ADC10MEM0;
   1835                  temperature = temperature - (temperature >> 3) +  corrected;
   1836                  }
   1837                  #endif
   1838                  #if defined(VCC_MEASURE_SUPPORT)
   1839                  if (  (ADC10MCTL0 & ADC10INCH_15) == ADC10INCH_11)
   1840                    vcc = ADC10MEM0;
   1841                  #endif
   1842              }
   1843              ADC10IFG = 0x00;                                         // Clear ADC10IFG by reading ADC10MEM0
   1844          
   1845          }
   1846          #endif

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      8   adc10_interrupt
     24   adc_interrupt
       24   -> dc_filter16
       24   -> dc_filter24
       24   -> log_parameters
       24   -> sqac48_16
      4   limp_trigger_interrupt
      4   log_parameters


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ??adc10_interrupt??INTVEC 114
       2  ??adc_interrupt??INTVEC 112
       2  ??limp_trigger_interrupt??INTVEC 110
       2  _A_ADC10IFG_L
       2  _A_ADC10MCTL0_L
       2  _A_ADC10MEM0_L
       4  _A_MPYS8
       2  _A_MPYS_L
       4  _A_OP2_8
       2  _A_OP2_L
       2  _A_PAOUT_L
       2  _A_PDOUT_L
       8  _A_RES8
       2  _A_SD24BCCTL0_L
       2  _A_SD24BIFG_L
       4  _A_SD24BMEM2_8
       2  _A_SD24BMEMH0_L
       2  _A_SD24BPRE0_L
       2  _A_SD24BPRE2_L
       2  _A_WDTCTL_L
      68  adc10_interrupt
       8  adc_i_buffer
    1192  adc_interrupt
       2  adc_interrupts
       2  adc_v_buffer
       2  battery_countdown
      16  limp_trigger_interrupt
     218  log_parameters
       4  rolling_0s
       4  rolling_1s
       4  rolling_random
       4  sample_count
       2  samples_per_second

 
   218 bytes in segment CODE
    46 bytes in segment DATA16_AN
    32 bytes in segment DATA16_Z
     6 bytes in segment INTVEC
 1 276 bytes in segment ISR_CODE
 
 1 494 bytes of CODE  memory
     0 bytes of CONST memory (+  6 bytes shared)
    32 bytes of DATA  memory (+ 46 bytes shared)

Errors: none
Warnings: none
